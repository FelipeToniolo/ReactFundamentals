{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","index.js"],"names":["Hero","react_default","a","createElement","className","Book","_ref","title","Turn","_ref2","author","books","style","backgroundColor","src","imageUrl","alt","map","key","Continue","Footer","id","href","AuthorQuiz","_ref3","turnData","Boolean","window","location","hostname","match","state","authors","allBooks","reduce","p","c","i","concat","book","fourRandomBooks","shuffle","slice","answer","sample","find","some","getTurnData","name","imageSource","imageAttribution","ReactDOM","render","src_AuthorQuiz","document","getElementById"],"mappings":"uPAIA,SAASA,IACP,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0DAKN,SAASE,EAATC,GAAuB,IAARC,EAAQD,EAARC,MACb,OAAQN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACrBH,EAAAC,EAAAC,cAAA,UAAKI,IAKT,SAASC,EAATC,GAAgC,IAAhBC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,MACpB,OAAQV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUQ,MAAO,CAACC,gBAAiB,UAC1DZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKW,IAAKJ,EAAOK,SAAUX,UAAU,cAAcY,IAAI,YAEzDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZO,EAAMM,IAAI,SAACV,GAAD,OAAWN,EAAAC,EAAAC,cAACE,EAAD,CAAME,MAAOA,EAAOW,IAAKX,QAKrD,SAASY,IACL,OAAQlB,EAAAC,EAAAC,cAAA,YAGZ,SAASiB,IACP,OAAQnB,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,SAASjB,UAAU,OACjCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,sBACqBH,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,+CAAR,qBADrB,mCAoBSC,MAZf,SAAAC,GAAiC,IAAXC,EAAWD,EAAXC,SACpB,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAACK,EAASiB,GACVxB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,QCxCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECqDN,IAAMC,EAAQ,CACVN,SAhBJ,SAAqBO,GACjB,IAAMC,EAAWD,EAAQE,OAAO,SAAUC,EAAGC,EAAGC,GAC5C,OAAOF,EAAEG,OAAOF,EAAEG,OACnB,IACGC,EAAkBC,kBAAQR,GAAUS,MAAM,EAAE,GAC5CC,EAASC,iBAAOJ,GAEtB,MAAO,CACH7B,MAAO6B,EACP9B,OAAQsB,EAAQa,KAAK,SAACnC,GAAD,OACjBA,EAAOC,MAAMmC,KAAK,SAACvC,GAAD,OACdA,IAAUoC,OAKZI,CAjEE,CACZ,CACIC,KAAM,aACNjC,SAAU,+BACVkC,YAAa,oBACbtC,MAAO,CAAC,oCACA,0BACA,gBAEZ,CACIqC,KAAM,gBACNjC,SAAU,kCACVkC,YAAa,oBACbtC,MAAO,CAAC,wBAEZ,CACIqC,KAAM,eACNjC,SAAU,iCACVkC,YAAa,oBACbC,iBAAkB,WAClBvC,MAAO,CAAC,cACA,OAEZ,CACIqC,KAAM,kBACNjC,SAAU,oCACVkC,YAAa,oBACbtC,MAAO,CAAC,oBACA,qBACA,gBAEZ,CACIqC,KAAM,sBACNjC,SAAU,wCACVkC,YAAa,oBACbtC,MAAO,CAAC,SACA,UACA,qBAEZ,CACIqC,KAAM,iBACNjC,SAAU,+BACVkC,YAAa,oBACbC,iBAAkB,WAClBvC,MAAO,CAAC,8CAwBhBwC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAetB,GAAUuB,SAASC,eAAe","file":"static/js/main.99c539fb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './bootstrap.min.css';\n\nfunction Hero() {\n  return (<div className=\"row\">\n    <div className=\"jumbotron col-10 offset-1\">\n      <h1>Author Quiz</h1>\n      <p>Select the book written by the author shown</p>\n    </div>\n  </div>);\n}\n\nfunction Book({title}) {\n  return (<div className=\"answer\">\n    <h4>{title}</h4>\n  </div>\n  );\n}\n\nfunction Turn({ author, books}) {\n    return (<div className=\"row turn\"style={{backgroundColor: \"white\"}}>\n    <div className=\" col-4 offset-1\">\n      <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\" />\n    </div>\n    <div className=\"col-6\">\n      {books.map((title) => <Book title={title} key={title}></Book>)}\n    </div>\n  </div>);\n}\n\nfunction Continue() {\n    return (<div/>);\n}\n\nfunction Footer() {\n  return (<div id=\"footer\" className=\"row\">\n    <div className=\"col-12\">\n      <p className=\"text-muted credit\">\n        All image are from <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikemedia Commons</a> and are in the public domain\n      </p>\n    </div>\n  </div>);\n}\n\n\nfunction AuthorQuiz ({turnData}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero />\n      <Turn {...turnData} />\n      <Continue />\n      <Footer />\n    </div>\n\n  );\n}\n\nexport default AuthorQuiz;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport register from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n\nconst authors = [\n    {\n        name: 'Mark Twain',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['The Adventure os Huckleberry Finn',\n                'Life on the Mississippi',\n                'Roughing It' ]\n    },\n    {\n        name: 'Joseph Conrad',\n        imageUrl: 'images/authors/josephconrad.png',\n        imageSource: 'Wikimedia Commons',\n        books: [' Heart od Darkness ' ]\n    },\n    {\n        name: 'Stephen King',\n        imageUrl: 'images/authors/stephenking.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Pinguino',\n        books: ['The Shining',\n                'IT' ]\n    },\n    {\n        name: 'Charles Dickens',\n        imageUrl: 'images/authors/charlesdickens.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['David Copperfield',\n                'A Tale of Two City',\n                'Roughing It' ]\n    },\n    {\n        name: 'William Shakespeare',\n        imageUrl: 'images/authors/williamshakespeare.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['Hamlet',\n                'Macbeth',\n                'Romeo and Juliet' ]\n    },\n    {\n        name: 'Joanne Rowling',\n        imageUrl: 'images/authors/jkrowling.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Pinguino',\n        books: [' Harry Potter and the Sorcerers Stone ' ]\n    }\n\n];\n\nfunction getTurnData(authors) {\n    const allBooks = authors.reduce(function (p, c, i) {\n        return p.concat(c.book);\n    }, []);\n    const fourRandomBooks = shuffle(allBooks).slice(0,4);\n    const answer = sample(fourRandomBooks);\n\n    return {\n        books: fourRandomBooks,\n        author: authors.find((author) => \n            author.books.some((title) => \n                title === answer))\n    }\n}\n\nconst state = {\n    turnData: getTurnData(authors)\n};\n\nReactDOM.render(<AuthorQuiz {...state}/>, document.getElementById('root'));\n// registerServiceWorker();"],"sourceRoot":""}